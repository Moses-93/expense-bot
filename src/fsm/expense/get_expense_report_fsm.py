from aiogram.fsm.context import FSMContext
from src.states.expenses import GetExpensesReportStates
from src.services.expense.expense_service import ExpenseReportService
from src.services.expense.validators import ExpenseValidator


MESSAGES = {
    "start": "üìä –ì–µ–Ω–µ—Ä—É—î–º–æ –∑–≤—ñ—Ç! –í–≤–µ–¥–∏ *–ø–æ—á–∞—Ç–∫–æ–≤—É –¥–∞—Ç—É* —É —Ñ–æ—Ä–º–∞—Ç—ñ *–î–î.–ú–ú.–†–†–†–†*. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.2025",
    "set_end_date": "‚û°Ô∏è –¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ *–∫—ñ–Ω—Ü–µ–≤—É –¥–∞—Ç—É*. –¢–∞–∫ —Å–∞–º–æ ‚Äî *–î–î.–ú–ú.–†–†–†–†*. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.2025",
    "invalid_date": "‚ùå –£–ø—Å, —â–æ—Å—å –Ω–µ —Ç–∞–∫ –∑ –¥–∞—Ç–æ—é! –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —É —Ñ–æ—Ä–º–∞—Ç—ñ *–î–î.–ú–ú.–†–†–†–†*. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 01.01.2025",
    "success": "‚ú® –ß—É–¥–æ–≤–æ! –ó–≤—ñ—Ç —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ. –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞—Ç–∏ –¥–∞–ª—ñ! üí™",
    "report_error": "üò¨ –û–π-–æ–π, –∑–≤—ñ—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏! –ê–ª–µ –Ω—ñ—á–æ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ ‚Äî —Å–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑ —Ç—Ä–æ—Ö–∏ –ø—ñ–∑–Ω—ñ—à–µ. –Ø –≤–∂–µ –ø—Ä–∞—Ü—é—é –Ω–∞–¥ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º! üí™",
}


class GetReportFSMService:
    def __init__(
        self, validator: ExpenseValidator, expense_report_service: ExpenseReportService
    ):
        self.validator = validator
        self.expense_report_service = expense_report_service

    async def start(self, state: FSMContext):
        await state.clear()
        await state.set_state(GetExpensesReportStates.START_DATE)
        return MESSAGES["start"]

    async def set_start_date(self, start_date: str, state: FSMContext):
        valid_date = self.validator.is_valid_date(start_date)
        if valid_date is None:
            await state.clear()
            return MESSAGES["invalid_date"]
        await state.update_data(start_date=start_date)
        await state.set_state(GetExpensesReportStates.END_DATE)
        return MESSAGES["set_end_date"]

    async def set_end_date(self, user_id: int, end_date: str, state: FSMContext):
        valid_date = self.validator.is_valid_date(end_date)
        if valid_date is None:
            await state.clear()
            return MESSAGES["invalid_date"], None
        data = await state.get_data()
        report = await self.expense_report_service.get_expenses_report(
            user_id, data["start_date"], data["end_date"]
        )
        return MESSAGES["success"], (report if report else MESSAGES["report_error"])
